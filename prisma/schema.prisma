datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  WOLF
  USER
}

enum Type {
  tshirt
  sweater
  hoodie
  accessory
  print
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("user")
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Address       Address[]
  Order         Order[]
  Cart          Cart[]

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Address Address[]

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// product model
model Product {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description1 String?
  description2 String?
  description3 String?
  description4 String?
  webMFile     String
  mp4File      String
  imageUrl1    String?
  imageUrl2    String?
  imageUrl3    String?
  imageUrl4    String?
  price        Int
  type         Type
  sizes        productSize[]
  CartItems    CartItems[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  stock        Int?          @default(0)
  imageUrl1Alt String?
  imageUrl2Alt String?
  imageUrl3Alt String?
  imageUrl4Alt String?

  @@map("products")
}

// Size model
model productSize {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  size      String?
  quantity  Int
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("productSizes")
}

model Address {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  street      String?
  houseNumber String?
  city        String?
  postCode    String?
  state       String?
  country     String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Account     Account? @relation(fields: [accountId], references: [id])
  userId      String   @db.ObjectId
  accountId   String?  @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("addresses")
}

// order model
model Order {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  orderNo       String      @unique
  items         CartItems[]
  user          User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String      @db.ObjectId
  status        String      @default("pending")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  total         String
  paymentMethod String?

  @@map("orders")
}

// cart model
model Cart {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  items     CartItems[]
  User      User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?     @db.ObjectId
  status    String      @default("active")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("carts")
}

// cart items model
model CartItems {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  productId    String  @db.ObjectId
  product      Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity     Int
  size         String?
  sizeQuantity Int?
  orderId      String? @db.ObjectId
  order        Order?  @relation(fields: [orderId], references: [id])
  Cart         Cart?   @relation(fields: [cartId], references: [id])
  cartId       String? @db.ObjectId

  @@map("cartItems")
}
